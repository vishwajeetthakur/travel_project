# name: CI Pipeline

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     services:
#       postgres:
#         image: postgres:13
#         env:
#           POSTGRES_DB: test_db
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#         options: >-
#           --health-cmd "pg_isready -U $${POSTGRES_USER}" 
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432

#     # env:
#     #   POSTGRES_DB: test_db
#     #   POSTGRES_USER: postgres
#     #   POSTGRES_PASSWORD: postgres
#     #   DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

#     env:
#       POSTGRES_DB: test_db
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       DATABASE_URL: postgres://postgres:postgres@postgres:5432/test_db

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Create log directory
#       run: mkdir -p travel_project/log

#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: 3.9

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r travel_project/requirements.txt

#     - name: Run migrations
#       run: |
#         python travel_project/manage.py migrate

#     - name: Run tests
#       run: |
#         python travel_project/manage.py test travel_admin.tests

#     - name: Print message
#       run: echo "Pipeline runs completely"


# ===============================================

name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create log directory
      run: mkdir -p travel_project/log

    - name: List all Files
      run: ls

    - name: Build Docker images
      run: docker-compose build

    - name: Start PostgreSQL test service
      run: docker-compose up -d postgres_test

    - name: Wait for PostgreSQL to be ready
      run: sleep 10

    - name: Check PostgreSQL logs
      run: docker-compose logs postgres_test

    - name: Build and run tests
      run: docker-compose run test_backend

    - name: Print message
      run: echo "Pipeline runs completely"

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Docker images
      run: docker-compose build

    - name: Start React app container
      run: docker-compose up -d my-react-app

    - name: Wait for React build
      run: sleep 30

    - name: List files in React app container
      run: docker-compose exec -T my-react-app ls /app

    - name: Copy build files
      run: docker cp $(docker-compose ps -q my-react-app):/app/dist ./dist

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
